// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("postgresql://akay_app:%40Akay2k25%21@ep-red-tree-a12fnnoh-pooler.ap-southeast-1.aws.neon.tech/akay_finance?sslmode=require&pgbouncer=true") 
}

enum Role {
  MEMBER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  REPAYMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                 String              @id @default(cuid())
  name               String
  email              String              @unique
  password           String
  role               Role                @default(MEMBER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  @@map("users")

  // Relasi eksplisit (nama relasi harus sama di kedua sisi)
  savings            SavingsAccount?     @relation("UserSavingsAccount")
  loans              Loan[]              @relation("UserLoans")
  transactions       Transaction[]       @relation("UserTransactions")
  depositRequests    DepositRequest[]    @relation("UserDepositRequests")
  withdrawalRequests WithdrawalRequest[] @relation("UserWithdrawalRequests")
}

model SavingsAccount {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("savings_accounts")
  user      User     @relation("UserSavingsAccount", fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String           @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Int
  note      String?
  createdAt DateTime         @default(now())
  @@map("transactions")

  user      User             @relation("UserTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DepositRequest {
  id        String        @id @default(cuid())
  userId    String
  amount    Int
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  @@map("deposit_requests")
  user      User          @relation("UserDepositRequests", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WithdrawalRequest {
  id        String        @id @default(cuid())
  userId    String
  amount    Int
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  @@map("withdrawal_requests")

  user      User          @relation("UserWithdrawalRequests", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Loan {
  id             String        @id @default(cuid())
  userId         String
  principal      Int
  interestBps    Int
  termMonths     Int
  status         RequestStatus @default(PENDING)
  remaining      Int           @default(0)
  createdAt      DateTime      @default(now())
  @@map("loans")

  user           User          @relation("UserLoans", fields: [userId], references: [id], onDelete: Cascade)
  repayments     Repayment[]

  @@index([userId])
}

model Repayment {
  id        String   @id @default(cuid())
  loanId    String
  amount    Int
  createdAt DateTime @default(now())
  @@map("repayments")

  loan      Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@index([loanId])
}
